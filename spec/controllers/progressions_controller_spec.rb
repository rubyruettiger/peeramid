require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe ProgressionsController do

  let(:current_user) { FactoryGirl.create(:user)}
  let(:lesson) {Lesson.create(:name => 'Boom Boom', :section => section)}
  let(:section) {Section.create(:name => 'Chicka Boom', :course => course)}
  let(:course) {Course.create(:name => 'ChickaRocka')}

  before { controller.stub(:current_user).and_return(current_user) }

  context "a progression exists for the current_user and the lesson" do
    render_views

    let!(:progression) { current_user.progressions.create(:progressable => lesson)}

    it "create a mark_completed route that lets user change their mark to completed -- and alerts them that they will have a test " do
        current_user.progressions.first.progressable.should eql(lesson)
      end

    pending "marked completed alerts mentor via email if mentor exists"

    context "and the progression is marked completed" do

      pending "and the progression is marked completed, fill in a bar in a progress bar for that lesson"

    end
  end
end
